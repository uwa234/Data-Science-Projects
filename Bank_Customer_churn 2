#!/usr/bin/env python
# coding: utf-8

# In[1]:


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import warnings
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
warnings.filterwarnings('ignore')

os.chdir(r'C:\Users\pokosun\Desktop\Machine Learning A-Z Template Folder\Part 10 - Model Selection & Boosting\Section 49 - XGBoost')


# In[2]:


#Importing the dataset
dataset = pd.read_csv('Churn_Modelling.csv')
X = dataset.iloc[:, 3:13].values
y = dataset.iloc[:, 13].values

dataset.head()


# In[3]:


X = pd.DataFrame(X)


# In[4]:


X1 = pd.get_dummies(X[1])


# In[5]:


label = LabelEncoder()


# In[6]:


X[2] = label.fit_transform(X[2])


# In[7]:


X = pd.concat([X,X1], axis=1)


# In[8]:


del X[1]


# In[9]:


scaler = StandardScaler()


# In[10]:


X = scaler.fit_transform(X)


# In[11]:


#Splitig the dataset into training and test sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)


# In[12]:


#Importing the Artificial Neural Network libraries
import keras
from keras.models import Sequential
from keras.layers import Dense


# In[13]:


#Creating the object of the Class
classifier = Sequential()


# In[14]:


#Adding the input layer and first hidden layer
classifier.add(Dense(output_dim = 6, init = 'uniform', activation = 'relu', input_dim = 12))


# In[15]:


#Adding the second hidden layer
classifier.add(Dense(output_dim = 6, init = 'uniform', activation = 'relu'))


# In[16]:


#Adding the output layer
classifier.add(Dense(output_dim = 1, init = 'uniform', activation = 'sigmoid'))


# In[17]:


#Compliling the ANN
classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])


# In[18]:


#Fitting the ANN to the training set
classifier.fit(X_train, y_train, batch_size = 10, nb_epoch = 100)


# In[31]:


#Predicting the test results
y_pred = classifier.predict(X_test)


# In[32]:


y_pred


# In[20]:


#Since y-pred is a continous value, it has to be chnaged into a boolean state.
y_pred = (y_pred > 0.5)


# In[21]:


# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
cm


# In[29]:


from keras import metrics
metrics.accuracy(y_test, y_pred)

