{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "import warnings\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "os.chdir(r'C:\\Users\\pokosun\\Desktop\\Machine Learning A-Z Template Folder\\Part 10 - Model Selection & Boosting\\Section 49 - XGBoost')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RowNumber</th>\n",
       "      <th>CustomerId</th>\n",
       "      <th>Surname</th>\n",
       "      <th>CreditScore</th>\n",
       "      <th>Geography</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Tenure</th>\n",
       "      <th>Balance</th>\n",
       "      <th>NumOfProducts</th>\n",
       "      <th>HasCrCard</th>\n",
       "      <th>IsActiveMember</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "      <th>Exited</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>15634602</td>\n",
       "      <td>Hargrave</td>\n",
       "      <td>619</td>\n",
       "      <td>France</td>\n",
       "      <td>Female</td>\n",
       "      <td>42</td>\n",
       "      <td>2</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>101348.88</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>15647311</td>\n",
       "      <td>Hill</td>\n",
       "      <td>608</td>\n",
       "      <td>Spain</td>\n",
       "      <td>Female</td>\n",
       "      <td>41</td>\n",
       "      <td>1</td>\n",
       "      <td>83807.86</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>112542.58</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>15619304</td>\n",
       "      <td>Onio</td>\n",
       "      <td>502</td>\n",
       "      <td>France</td>\n",
       "      <td>Female</td>\n",
       "      <td>42</td>\n",
       "      <td>8</td>\n",
       "      <td>159660.80</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113931.57</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>15701354</td>\n",
       "      <td>Boni</td>\n",
       "      <td>699</td>\n",
       "      <td>France</td>\n",
       "      <td>Female</td>\n",
       "      <td>39</td>\n",
       "      <td>1</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>93826.63</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>15737888</td>\n",
       "      <td>Mitchell</td>\n",
       "      <td>850</td>\n",
       "      <td>Spain</td>\n",
       "      <td>Female</td>\n",
       "      <td>43</td>\n",
       "      <td>2</td>\n",
       "      <td>125510.82</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>79084.10</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   RowNumber  CustomerId   Surname  CreditScore Geography  Gender  Age  \\\n",
       "0          1    15634602  Hargrave          619    France  Female   42   \n",
       "1          2    15647311      Hill          608     Spain  Female   41   \n",
       "2          3    15619304      Onio          502    France  Female   42   \n",
       "3          4    15701354      Boni          699    France  Female   39   \n",
       "4          5    15737888  Mitchell          850     Spain  Female   43   \n",
       "\n",
       "   Tenure    Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n",
       "0       2       0.00              1          1               1   \n",
       "1       1   83807.86              1          0               1   \n",
       "2       8  159660.80              3          1               0   \n",
       "3       1       0.00              2          0               0   \n",
       "4       2  125510.82              1          1               1   \n",
       "\n",
       "   EstimatedSalary  Exited  \n",
       "0        101348.88       1  \n",
       "1        112542.58       0  \n",
       "2        113931.57       1  \n",
       "3         93826.63       0  \n",
       "4         79084.10       0  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Importing the dataset\n",
    "dataset = pd.read_csv('Churn_Modelling.csv')\n",
    "X = dataset.iloc[:, 3:13].values\n",
    "y = dataset.iloc[:, 13].values\n",
    "\n",
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = pd.DataFrame(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "X1 = pd.get_dummies(X[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "label = LabelEncoder()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "X[2] = label.fit_transform(X[2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = pd.concat([X,X1], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "del X[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = StandardScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = scaler.fit_transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Splitig the dataset into training and test sets\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "#Importing the Artificial Neural Network libraries\n",
    "import keras\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating the object of the Class\n",
    "classifier = Sequential()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Adding the input layer and first hidden layer\n",
    "classifier.add(Dense(output_dim = 6, init = 'uniform', activation = 'relu', input_dim = 12))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Adding the second hidden layer\n",
    "classifier.add(Dense(output_dim = 6, init = 'uniform', activation = 'relu'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Adding the output layer\n",
    "classifier.add(Dense(output_dim = 1, init = 'uniform', activation = 'sigmoid'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Compliling the ANN\n",
    "classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "7500/7500 [==============================] - 1s 194us/step - loss: 0.4924 - accuracy: 0.7963\n",
      "Epoch 2/100\n",
      "7500/7500 [==============================] - 1s 129us/step - loss: 0.4309 - accuracy: 0.7963\n",
      "Epoch 3/100\n",
      "7500/7500 [==============================] - 1s 128us/step - loss: 0.4254 - accuracy: 0.7963\n",
      "Epoch 4/100\n",
      "7500/7500 [==============================] - 1s 122us/step - loss: 0.4215 - accuracy: 0.8069\n",
      "Epoch 5/100\n",
      "7500/7500 [==============================] - 1s 128us/step - loss: 0.4178 - accuracy: 0.8239\n",
      "Epoch 6/100\n",
      "7500/7500 [==============================] - 1s 129us/step - loss: 0.4154 - accuracy: 0.8279\n",
      "Epoch 7/100\n",
      "7500/7500 [==============================] - 1s 130us/step - loss: 0.4132 - accuracy: 0.8295\n",
      "Epoch 8/100\n",
      "7500/7500 [==============================] - 1s 133us/step - loss: 0.4123 - accuracy: 0.8327\n",
      "Epoch 9/100\n",
      "7500/7500 [==============================] - 1s 128us/step - loss: 0.4112 - accuracy: 0.8317\n",
      "Epoch 10/100\n",
      "7500/7500 [==============================] - 1s 132us/step - loss: 0.4088 - accuracy: 0.8336\n",
      "Epoch 11/100\n",
      "7500/7500 [==============================] - 1s 128us/step - loss: 0.4064 - accuracy: 0.8348\n",
      "Epoch 12/100\n",
      "7500/7500 [==============================] - 1s 122us/step - loss: 0.4045 - accuracy: 0.8349\n",
      "Epoch 13/100\n",
      "7500/7500 [==============================] - 1s 128us/step - loss: 0.4030 - accuracy: 0.8348\n",
      "Epoch 14/100\n",
      "7500/7500 [==============================] - 1s 130us/step - loss: 0.4021 - accuracy: 0.8352\n",
      "Epoch 15/100\n",
      "7500/7500 [==============================] - 1s 151us/step - loss: 0.4014 - accuracy: 0.8364\n",
      "Epoch 16/100\n",
      "7500/7500 [==============================] - 2s 202us/step - loss: 0.4006 - accuracy: 0.8361\n",
      "Epoch 17/100\n",
      "7500/7500 [==============================] - 1s 182us/step - loss: 0.3992 - accuracy: 0.8341\n",
      "Epoch 18/100\n",
      "7500/7500 [==============================] - 1s 188us/step - loss: 0.3997 - accuracy: 0.8343\n",
      "Epoch 19/100\n",
      "7500/7500 [==============================] - 1s 142us/step - loss: 0.3988 - accuracy: 0.8345\n",
      "Epoch 20/100\n",
      "7500/7500 [==============================] - 1s 160us/step - loss: 0.3986 - accuracy: 0.8363\n",
      "Epoch 21/100\n",
      "7500/7500 [==============================] - 1s 154us/step - loss: 0.3981 - accuracy: 0.8361\n",
      "Epoch 22/100\n",
      "7500/7500 [==============================] - 1s 132us/step - loss: 0.3981 - accuracy: 0.8364\n",
      "Epoch 23/100\n",
      "7500/7500 [==============================] - 2s 215us/step - loss: 0.3976 - accuracy: 0.8372\n",
      "Epoch 24/100\n",
      "7500/7500 [==============================] - 1s 158us/step - loss: 0.3976 - accuracy: 0.8376\n",
      "Epoch 25/100\n",
      "7500/7500 [==============================] - 1s 174us/step - loss: 0.3973 - accuracy: 0.8363\n",
      "Epoch 26/100\n",
      "7500/7500 [==============================] - 1s 162us/step - loss: 0.3969 - accuracy: 0.8369\n",
      "Epoch 27/100\n",
      "7500/7500 [==============================] - 1s 143us/step - loss: 0.3969 - accuracy: 0.8375\n",
      "Epoch 28/100\n",
      "7500/7500 [==============================] - 1s 129us/step - loss: 0.3966 - accuracy: 0.8360\n",
      "Epoch 29/100\n",
      "7500/7500 [==============================] - 1s 128us/step - loss: 0.3968 - accuracy: 0.8357\n",
      "Epoch 30/100\n",
      "7500/7500 [==============================] - 1s 133us/step - loss: 0.3965 - accuracy: 0.8365\n",
      "Epoch 31/100\n",
      "7500/7500 [==============================] - 1s 128us/step - loss: 0.3957 - accuracy: 0.8381\n",
      "Epoch 32/100\n",
      "7500/7500 [==============================] - 1s 136us/step - loss: 0.3964 - accuracy: 0.8361\n",
      "Epoch 33/100\n",
      "7500/7500 [==============================] - 1s 122us/step - loss: 0.3962 - accuracy: 0.8352\n",
      "Epoch 34/100\n",
      "7500/7500 [==============================] - 1s 129us/step - loss: 0.3958 - accuracy: 0.8365\n",
      "Epoch 35/100\n",
      "7500/7500 [==============================] - 1s 128us/step - loss: 0.3953 - accuracy: 0.8363\n",
      "Epoch 36/100\n",
      "7500/7500 [==============================] - 1s 128us/step - loss: 0.3959 - accuracy: 0.8365\n",
      "Epoch 37/100\n",
      "7500/7500 [==============================] - 1s 146us/step - loss: 0.3960 - accuracy: 0.8359\n",
      "Epoch 38/100\n",
      "7500/7500 [==============================] - 1s 132us/step - loss: 0.3952 - accuracy: 0.8353\n",
      "Epoch 39/100\n",
      "7500/7500 [==============================] - 1s 159us/step - loss: 0.3952 - accuracy: 0.8368\n",
      "Epoch 40/100\n",
      "7500/7500 [==============================] - 1s 145us/step - loss: 0.3954 - accuracy: 0.8372\n",
      "Epoch 41/100\n",
      "7500/7500 [==============================] - 1s 131us/step - loss: 0.3947 - accuracy: 0.8355\n",
      "Epoch 42/100\n",
      "7500/7500 [==============================] - 1s 135us/step - loss: 0.3948 - accuracy: 0.8360\n",
      "Epoch 43/100\n",
      "7500/7500 [==============================] - 1s 131us/step - loss: 0.3950 - accuracy: 0.8359\n",
      "Epoch 44/100\n",
      "7500/7500 [==============================] - 1s 125us/step - loss: 0.3943 - accuracy: 0.8352\n",
      "Epoch 45/100\n",
      "7500/7500 [==============================] - 1s 130us/step - loss: 0.3946 - accuracy: 0.8367\n",
      "Epoch 46/100\n",
      "7500/7500 [==============================] - 1s 128us/step - loss: 0.3944 - accuracy: 0.8383\n",
      "Epoch 47/100\n",
      "7500/7500 [==============================] - 1s 129us/step - loss: 0.3942 - accuracy: 0.8361\n",
      "Epoch 48/100\n",
      "7500/7500 [==============================] - 1s 132us/step - loss: 0.3945 - accuracy: 0.8352\n",
      "Epoch 49/100\n",
      "7500/7500 [==============================] - 1s 131us/step - loss: 0.3942 - accuracy: 0.8368\n",
      "Epoch 50/100\n",
      "7500/7500 [==============================] - 1s 129us/step - loss: 0.3938 - accuracy: 0.8375\n",
      "Epoch 51/100\n",
      "7500/7500 [==============================] - 1s 129us/step - loss: 0.3935 - accuracy: 0.8379\n",
      "Epoch 52/100\n",
      "7500/7500 [==============================] - 1s 133us/step - loss: 0.3942 - accuracy: 0.8383\n",
      "Epoch 53/100\n",
      "7500/7500 [==============================] - 1s 134us/step - loss: 0.3933 - accuracy: 0.8367\n",
      "Epoch 54/100\n",
      "7500/7500 [==============================] - 1s 129us/step - loss: 0.3931 - accuracy: 0.8372\n",
      "Epoch 55/100\n",
      "7500/7500 [==============================] - 1s 127us/step - loss: 0.3934 - accuracy: 0.8387\n",
      "Epoch 56/100\n",
      "7500/7500 [==============================] - 1s 127us/step - loss: 0.3928 - accuracy: 0.8388\n",
      "Epoch 57/100\n",
      "7500/7500 [==============================] - 1s 132us/step - loss: 0.3931 - accuracy: 0.8383\n",
      "Epoch 58/100\n",
      "7500/7500 [==============================] - 1s 129us/step - loss: 0.3920 - accuracy: 0.8393\n",
      "Epoch 59/100\n",
      "7500/7500 [==============================] - 1s 129us/step - loss: 0.3918 - accuracy: 0.8381\n",
      "Epoch 60/100\n",
      "7500/7500 [==============================] - 1s 137us/step - loss: 0.3913 - accuracy: 0.8383\n",
      "Epoch 61/100\n",
      "7500/7500 [==============================] - 1s 131us/step - loss: 0.3900 - accuracy: 0.8385\n",
      "Epoch 62/100\n",
      "7500/7500 [==============================] - 1s 128us/step - loss: 0.3888 - accuracy: 0.8393\n",
      "Epoch 63/100\n",
      "7500/7500 [==============================] - 1s 129us/step - loss: 0.3862 - accuracy: 0.8415\n",
      "Epoch 64/100\n",
      "7500/7500 [==============================] - 1s 134us/step - loss: 0.3839 - accuracy: 0.8421\n",
      "Epoch 65/100\n",
      "7500/7500 [==============================] - 1s 131us/step - loss: 0.3805 - accuracy: 0.8428\n",
      "Epoch 66/100\n",
      "7500/7500 [==============================] - 1s 129us/step - loss: 0.3764 - accuracy: 0.8428\n",
      "Epoch 67/100\n",
      "7500/7500 [==============================] - 1s 127us/step - loss: 0.3723 - accuracy: 0.8429\n",
      "Epoch 68/100\n",
      "7500/7500 [==============================] - 1s 133us/step - loss: 0.3682 - accuracy: 0.8471\n",
      "Epoch 69/100\n",
      "7500/7500 [==============================] - 1s 137us/step - loss: 0.3645 - accuracy: 0.8507\n",
      "Epoch 70/100\n",
      "7500/7500 [==============================] - 1s 132us/step - loss: 0.3624 - accuracy: 0.8508\n",
      "Epoch 71/100\n",
      "7500/7500 [==============================] - 1s 130us/step - loss: 0.3607 - accuracy: 0.8543\n",
      "Epoch 72/100\n",
      "7500/7500 [==============================] - 1s 138us/step - loss: 0.3584 - accuracy: 0.8536\n",
      "Epoch 73/100\n",
      "7500/7500 [==============================] - 1s 131us/step - loss: 0.3565 - accuracy: 0.8548\n",
      "Epoch 74/100\n",
      "7500/7500 [==============================] - 1s 129us/step - loss: 0.3551 - accuracy: 0.8580\n",
      "Epoch 75/100\n",
      "7500/7500 [==============================] - 1s 130us/step - loss: 0.3519 - accuracy: 0.8585\n",
      "Epoch 76/100\n",
      "7500/7500 [==============================] - 1s 125us/step - loss: 0.3525 - accuracy: 0.8573\n",
      "Epoch 77/100\n",
      "7500/7500 [==============================] - 1s 133us/step - loss: 0.3521 - accuracy: 0.8587\n",
      "Epoch 78/100\n",
      "7500/7500 [==============================] - 1s 135us/step - loss: 0.3518 - accuracy: 0.8608\n",
      "Epoch 79/100\n",
      "7500/7500 [==============================] - 1s 140us/step - loss: 0.3509 - accuracy: 0.8577\n",
      "Epoch 80/100\n",
      "7500/7500 [==============================] - 1s 142us/step - loss: 0.3504 - accuracy: 0.8616\n",
      "Epoch 81/100\n",
      "7500/7500 [==============================] - 1s 144us/step - loss: 0.3509 - accuracy: 0.8593\n",
      "Epoch 82/100\n",
      "7500/7500 [==============================] - 1s 149us/step - loss: 0.3498 - accuracy: 0.8599\n",
      "Epoch 83/100\n",
      "7500/7500 [==============================] - 2s 213us/step - loss: 0.3506 - accuracy: 0.8603\n",
      "Epoch 84/100\n",
      "7500/7500 [==============================] - 1s 162us/step - loss: 0.3497 - accuracy: 0.8607\n",
      "Epoch 85/100\n",
      "7500/7500 [==============================] - 1s 145us/step - loss: 0.3492 - accuracy: 0.8592\n",
      "Epoch 86/100\n",
      "7500/7500 [==============================] - 1s 145us/step - loss: 0.3485 - accuracy: 0.8587\n",
      "Epoch 87/100\n",
      "7500/7500 [==============================] - 1s 145us/step - loss: 0.3488 - accuracy: 0.8608\n",
      "Epoch 88/100\n",
      "7500/7500 [==============================] - 1s 128us/step - loss: 0.3475 - accuracy: 0.8627\n",
      "Epoch 89/100\n",
      "7500/7500 [==============================] - 1s 130us/step - loss: 0.3489 - accuracy: 0.8593\n",
      "Epoch 90/100\n",
      "7500/7500 [==============================] - 1s 151us/step - loss: 0.3473 - accuracy: 0.8608\n",
      "Epoch 91/100\n",
      "7500/7500 [==============================] - 1s 132us/step - loss: 0.3477 - accuracy: 0.8613\n",
      "Epoch 92/100\n",
      "7500/7500 [==============================] - 1s 154us/step - loss: 0.3482 - accuracy: 0.8617\n",
      "Epoch 93/100\n",
      "7500/7500 [==============================] - 1s 132us/step - loss: 0.3474 - accuracy: 0.8603\n",
      "Epoch 94/100\n",
      "7500/7500 [==============================] - 1s 133us/step - loss: 0.3481 - accuracy: 0.8603\n",
      "Epoch 95/100\n",
      "7500/7500 [==============================] - 1s 149us/step - loss: 0.3471 - accuracy: 0.8615\n",
      "Epoch 96/100\n",
      "7500/7500 [==============================] - 1s 134us/step - loss: 0.3474 - accuracy: 0.8601\n",
      "Epoch 97/100\n",
      "7500/7500 [==============================] - 1s 147us/step - loss: 0.3467 - accuracy: 0.8613\n",
      "Epoch 98/100\n",
      "7500/7500 [==============================] - 1s 137us/step - loss: 0.3469 - accuracy: 0.8603\n",
      "Epoch 99/100\n",
      "7500/7500 [==============================] - 1s 145us/step - loss: 0.3470 - accuracy: 0.8609\n",
      "Epoch 100/100\n",
      "7500/7500 [==============================] - 1s 153us/step - loss: 0.3462 - accuracy: 0.8612\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.callbacks.History at 0x2209b98ae88>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Fitting the ANN to the training set\n",
    "classifier.fit(X_train, y_train, batch_size = 10, nb_epoch = 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Predicting the test results\n",
    "y_pred = classifier.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.2644553 ],\n",
       "       [0.36620283],\n",
       "       [0.13367912],\n",
       "       ...,\n",
       "       [0.29178697],\n",
       "       [0.13942489],\n",
       "       [0.03876704]], dtype=float32)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Since y-pred is a continous value, it has to be chnaged into a boolean state.\n",
    "y_pred = (y_pred > 0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1896,   95],\n",
       "       [ 249,  260]], dtype=int64)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Making the Confusion Matrix\n",
    "from sklearn.metrics import confusion_matrix\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "cm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor: id=376631, shape=(2500, 2500), dtype=float32, numpy=\n",
       "array([[1., 0., 1., ..., 1., 1., 1.],\n",
       "       [1., 0., 1., ..., 1., 1., 1.],\n",
       "       [1., 0., 1., ..., 1., 1., 1.],\n",
       "       ...,\n",
       "       [1., 0., 1., ..., 1., 1., 1.],\n",
       "       [1., 0., 1., ..., 1., 1., 1.],\n",
       "       [1., 0., 1., ..., 1., 1., 1.]], dtype=float32)>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from keras import metrics\n",
    "metrics.accuracy(y_test, y_pred)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
